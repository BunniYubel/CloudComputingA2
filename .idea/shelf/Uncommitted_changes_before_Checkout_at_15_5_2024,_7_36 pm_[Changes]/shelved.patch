Index: Data/point_collector.py
===================================================================
diff --git a/Data/point_collector.py b/Data/point_collector.py
--- a/Data/point_collector.py	
+++ b/Data/point_collector.py	
@@ -1,0 +1,31 @@
+import os
+import re
+
+
+def extract_numbers_from_filenames(directory):
+    """Extracts numeric parts from filenames in the specified directory."""
+    # List to store the extracted numbers
+    numbers = []
+
+    # Regex pattern to find numbers in the filenames
+    pattern = re.compile(r'\d+')
+
+    # List all files in the directory
+    for filename in os.listdir(directory):
+        # Check if the filename matches the expected pattern
+        if filename.startswith("Weather_Data_") and filename.endswith(".json"):
+            # Extract numbers using regex
+            match = pattern.search(filename)
+            if match:
+                number = match.group()
+                numbers.append(number)
+
+    return numbers
+
+
+# Directory containing the JSON files
+directory_path = './Data/'  # Change this to your actual path
+
+# Get the list of numbers from the filenames
+numbers_list = extract_numbers_from_filenames(directory_path)
+print(numbers_list)
\ No newline at end of file
Index: Data/checker.py
===================================================================
diff --git a/Data/checker.py b/Data/checker.py
--- a/Data/checker.py	
+++ b/Data/checker.py	
@@ -1,0 +1,140 @@
+import requests
+import json
+import time
+import os
+from datetime import datetime, timedelta
+current_time = datetime.now()
+format = '%I:%M%p'
+c_YM = current_time.strftime('%y:%m')
+c_date = current_time.strftime('%d')
+c_time = current_time.strftime('%I:%M%p')
+c_time = datetime.strptime(c_time, format)
+# URL to fetch the weather data
+source_url = "http://www.bom.gov.au/fwo/" #  add IDV60901/IDV60901.95936.json
+link_to_check_format = "http://www.bom.gov.au/climate/cdo/about/site-num.shtml"
+check_minuets = 10
+vic_id = "IDV60801"
+syd_id = "IDN60801"
+all_melbourne_id = "IDV60900"
+
+# sydney station 046000 - 075999
+# sydney station 146000 - 175999
+# victoria station 076000 - 090999
+# victoria station 176000 - 190999
+sydney_station = ['95916', '94741', '94716', '94995', '94700', '99132', '95541', '99759',
+                  '94757', '94686', '95756', '94901', '95869', '94794', '99763', '95740', '94782',
+                  '95717', '99108', '94937', '94599', '99997', '95721', '94921', '99755', '99145',
+                  '94798', '94761', '95520', '94736', '99738', '99105', '94760', '99152', '95937',
+                  '94776', '94799', '94721', '99754', '94598', '99129', '99742', '95761', '94691',
+                  '99109', '95716', '94941', '94783', '99762', '95757', '95995', '99758', '94701',
+                  '99133', '94582', '95686', '95940', '94740', '94890', '95766', '94589', '95727',
+                  '94927', '99753', '94862', '95770', '99790', '94767', '99786', '94730', '95571',
+                  '95697', '94710', '95681', '99071', '99134', '94751', '95707', '99118', '94792',
+                  '95746', '99765', '95896', '94696', '95710', '94785', '95747', '99764', '94910',
+                  '94793', '94843', '95706', '94750', '99135', '94711', '94592', '94746', '95784',
+                  '95570', '99787', '95527', '94766', '94789', '95931', '99791', '94727', '94926',
+                  '99752', '95771', '94588', '95726', '95767', '99946', '94732', '95748', '94765',
+                  '94909', '99792', '94773', '95709', '95772', '94925', '95908', '95725', '94708',
+                  '95699', '94933', '94749', '94694', '94944', '94769', '95744', '94790', '95752',
+                  '94728', '95705', '95512', '94929', '99136', '95729', '94587', '99823', '94712',
+                  '95695', '95768', '94744', '99064', '95682', '95728', '99072', '94928', '94752',
+                  '95704', '94729', '95753', '95929', '99789', '95745', '95895', '94768', '94748',
+                  '94877', '95765', '95909', '95773', '94725', '95708', '95925', '94772', '99793',
+                  '94764', '95749', '94733', '94699', '94692', '94738', '95715', '94780', '94915',
+                  '99761', '94796', '95754', '94755', '95778', '94702', '94714', '99825', '99063',
+                  '94743', '94939', '95719', '99106', '94919', '94763', '95758', '94775', '99110',
+                  '99757', '95774', '94923', '94759', '95723', '95735', '95762', '99468', '94934',
+                  '95734', '95722', '94758', '99756', '94689', '94723', '99111', '99146', '94774',
+                  '95935', '94918', '99107', '94735', '95718', '94938', '95692', '94596', '94715',
+                  '99824', '94650', '95684', '94996', '99998', '94703', '95779', '94754', '94797',
+                  '99760', '94781', '95485', '94943', '94693']
+victoria_station = ['94891', '95853', '94829', '95941', '95845', '94844', '94852', '95890',
+                    '94872', '94833', '94864', '95832', '99811', '99796', '95873', '95936', '99806',
+                    '95825', '95872', '94849', '95864', '95833', '99810', '94920', '94865', '94824',
+                    '95829', '94853', '94900', '95901', '94886', '94828', '94874', '94835', '94862', '99817', '99051', '94858', '95822', '99047', '94878', '95855', '99821', '94839', '94881', '95843', '95838', '94842', '94854', '94911', '95896', '94855', '95881', '94843', '94906', '95839', '95907', '94880', '94838', '99066', '99820', '94879', '94859', '95874', '99816', '95835', '99050', '94863', '94834', '94930', '94875', '99053', '95836', '99815', '94860', '94837', '94876', '94933', '94899', '99049', '94913', '94856', '94905', '94840', '99819', '95904', '94883', '94895', '94894', '95913', '99822', '94882', '95840', '99818', '94912', '94857', '99048', '94932', '94898', '94836', '94861', '99052', '95837', '99814', '94908', '94949', '99809', '94903', '94846', '94893', '95826', '99901', '95867', '99813', '94866', '94889', '94831', '94827', '94870', '94935', '95918', '94871', '94826', '94830', '94888', '99054', '99812', '95831', '99900', '95866', '99795', '95827', '94892', '94884', '94847', '94914', '94693']
+
+combined_data = {}
+
+def fetch_weather_data(url):
+    """Fetches weather data from the given URL and saves it locally."""
+    headers = {
+        'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0',
+        'Accept': 'application/json'
+    }
+    response = requests.get(url, headers=headers)
+    time.sleep(0.1)
+    if response.status_code == 200:
+
+        return response.json()
+    else:
+        raise Exception("Failed to fetch data: HTTP Status {}".format(response.status_code))
+
+
+def save_data_locally(data, filename):
+    """Saves the fetched data to a local file."""
+    with open(filename, 'w') as file:
+        json.dump(data, file, indent=4)
+
+def process_weather_data(item):
+    """Process a single data entry and return a dictionary of specific attributes."""
+    name_with_underscores = item['name'].replace(' ', '_')
+
+    check_time = item['local_date_time'].split("/")[1]
+
+    datetime1 = datetime.strptime(check_time, format)
+    minutes_diff = (c_time - datetime1).total_seconds() / 60.0
+    values = {}
+    if item['local_date_time'].split("/")[0] == c_date and minutes_diff <= check_minuets:
+        key = name_with_underscores
+        values[c_YM + ":" + c_date + ":" + check_time] = {
+            'weather': item['weather'],
+            'rel_hum': item['rel_hum'],
+            'air_temp': item['air_temp'],
+            'cloud': item['cloud'],
+            'rain_trace': item['rain_trace'],
+            'wind_spd_kmh': item['wind_spd_kmh']
+        }
+    else:
+        return "None", "None"
+    return key, values
+
+def main():
+    station = ""
+    # Ensure the directory exists
+    directory = "Data"
+    count = 0
+    if not os.path.exists(directory):
+        os.makedirs(directory)
+    # Fetch the weather data
+    for id in (vic_id, syd_id):
+        loc = ""
+        if id == vic_id:
+            loc = "VIC"
+            station = victoria_station
+        else:
+            loc = "NSW"
+            station = sydney_station
+        for area in station:
+            try:
+                station = str(area)
+                t_url = source_url + id + "/" + id + "." + station + ".json"
+                weather_data = fetch_weather_data(t_url)
+                if weather_data and 'observations' in weather_data and 'data' in weather_data['observations']:
+                    for item in weather_data['observations']['data']:
+                        key, values = process_weather_data(item)
+                        key = key + "-" + loc
+                        if key != "None":
+                            if key in combined_data:
+                                combined_data[key].append(values) # Extend the list if key already exists
+                            else:
+                                combined_data[key] = [values]  # Create new entry if key does not exist
+                            time.sleep(0.1)  # Sleep to be polite to the server
+                            count += 1
+                    # Save the data locally
+            except Exception as e:
+                print(f"Error fetching data for station {station}: {str(e)}")
+    save_data_locally(combined_data, "Data/Weather_Data.json")
+    print(f"total {count} amount of data fetchded")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
Index: Data/Weather_Data_Collector.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\nimport json\nimport time\n# URL to fetch the weather data\nsource_url = \"http://www.bom.gov.au/fwo/\" #  add IDV60901/IDV60901.95936.json\nlink_to_check_format = \"http://www.bom.gov.au/climate/cdo/about/site-num.shtml\"\n\nvic_id = \"IDV60801\"\nall_melbourne_id = \"IDV60900\"\n\n# sydney station 046000 - 075999\n# sydney station 146000 - 175999\n# victoria station 076000 - 090999\n# victoria station 176000 - 190999\nsydney_station = list(range(46000, 75999)) + list(range(146000, 175999))\nvictoria_station = list(range(94839, 190999)) #list(range(76000, 90999)) +\ndef fetch_weather_data(url):\n    \"\"\"Fetches weather data from the given URL and saves it locally.\"\"\"\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0',\n        'Accept': 'application/json'\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise Exception(\"Failed to fetch data: HTTP Status {}\".format(response.status_code))\n\n\ndef save_data_locally(data, filename):\n    \"\"\"Saves the fetched data to a local file.\"\"\"\n    with open(filename, 'a') as file:\n        json.dump(data, file, indent=4)\n    print(f\"Data successfully saved to {filename}\")\n\n\ndef main():\n    station = \"\"\n    # Fetch the weather data\n    for area in victoria_station:\n        try:\n            station = str(area)\n            t_url = source_url + vic_id + \"/\" + vic_id + \".\" + station + \".json\"\n            print(t_url)\n            weather_data = fetch_weather_data(t_url)\n\n            # Save the data locally\n            save_data_locally(weather_data, \"Data/Weather_Data\")\n            time.sleep(2)\n\n        except Exception as e:\n            time.sleep(2)\n            print(str(e))\n\n\nif __name__ == \"__main__\":\n    main()
===================================================================
diff --git a/Data/Weather_Data_Collector.py b/Data/Weather_Data_Collector.py
--- a/Data/Weather_Data_Collector.py	
+++ b/Data/Weather_Data_Collector.py	
@@ -1,19 +1,67 @@
 import requests
 import json
 import time
+import os
+from datetime import datetime
+import logging, json, requests, socket
+from flask import current_app
+
+
+# Change this url for router.fission request.post
+post_url = "http://router.fission/enqueue/weather"
+
+current_time = datetime.now()
+format = '%I:%M%p'
+c_YM = current_time.strftime('%y:%m')
+c_date = current_time.strftime('%d')
+c_time = current_time.strftime('%I:%M%p')
+c_time = datetime.strptime(c_time, format)
 # URL to fetch the weather data
 source_url = "http://www.bom.gov.au/fwo/" #  add IDV60901/IDV60901.95936.json
 link_to_check_format = "http://www.bom.gov.au/climate/cdo/about/site-num.shtml"
-
+check_minuets = 10
 vic_id = "IDV60801"
+syd_id = "IDN60801"
 all_melbourne_id = "IDV60900"
 
 # sydney station 046000 - 075999
 # sydney station 146000 - 175999
 # victoria station 076000 - 090999
 # victoria station 176000 - 190999
-sydney_station = list(range(46000, 75999)) + list(range(146000, 175999))
-victoria_station = list(range(94839, 190999)) #list(range(76000, 90999)) +
+sydney_station = ['95916', '94741', '94716', '94995', '94700', '99132', '95541', '99759',
+                  '94757', '94686', '95756', '94901', '95869', '94794', '99763', '95740', '94782',
+                  '95717', '99108', '94937', '94599', '99997', '95721', '94921', '99755', '99145',
+                  '94798', '94761', '95520', '94736', '99738', '99105', '94760', '99152', '95937',
+                  '94776', '94799', '94721', '99754', '94598', '99129', '99742', '95761', '94691',
+                  '99109', '95716', '94941', '94783', '99762', '95757', '95995', '99758', '94701',
+                  '99133', '94582', '95686', '95940', '94740', '94890', '95766', '94589', '95727',
+                  '94927', '99753', '94862', '95770', '99790', '94767', '99786', '94730', '95571',
+                  '95697', '94710', '95681', '99071', '99134', '94751', '95707', '99118', '94792',
+                  '95746', '99765', '95896', '94696', '95710', '94785', '95747', '99764', '94910',
+                  '94793', '94843', '95706', '94750', '99135', '94711', '94592', '94746', '95784',
+                  '95570', '99787', '95527', '94766', '94789', '95931', '99791', '94727', '94926',
+                  '99752', '95771', '94588', '95726', '95767', '99946', '94732', '95748', '94765',
+                  '94909', '99792', '94773', '95709', '95772', '94925', '95908', '95725', '94708',
+                  '95699', '94933', '94749', '94694', '94944', '94769', '95744', '94790', '95752',
+                  '94728', '95705', '95512', '94929', '99136', '95729', '94587', '99823', '94712',
+                  '95695', '95768', '94744', '99064', '95682', '95728', '99072', '94928', '94752',
+                  '95704', '94729', '95753', '95929', '99789', '95745', '95895', '94768', '94748',
+                  '94877', '95765', '95909', '95773', '94725', '95708', '95925', '94772', '99793',
+                  '94764', '95749', '94733', '94699', '94692', '94738', '95715', '94780', '94915',
+                  '99761', '94796', '95754', '94755', '95778', '94702', '94714', '99825', '99063',
+                  '94743', '94939', '95719', '99106', '94919', '94763', '95758', '94775', '99110',
+                  '99757', '95774', '94923', '94759', '95723', '95735', '95762', '99468', '94934',
+                  '95734', '95722', '94758', '99756', '94689', '94723', '99111', '99146', '94774',
+                  '95935', '94918', '99107', '94735', '95718', '94938', '95692', '94596', '94715',
+                  '99824', '94650', '95684', '94996', '99998', '94703', '95779', '94754', '94797',
+                  '99760', '94781', '95485', '94943', '94693']
+victoria_station = ['94891', '95853', '94829', '95941', '95845', '94844', '94852', '95890',
+                    '94872', '94833', '94864', '95832', '99811', '99796', '95873', '95936', '99806',
+                    '95825', '95872', '94849', '95864', '95833', '99810', '94920', '94865', '94824',
+                    '95829', '94853', '94900', '95901', '94886', '94828', '94874', '94835', '94862', '99817', '99051', '94858', '95822', '99047', '94878', '95855', '99821', '94839', '94881', '95843', '95838', '94842', '94854', '94911', '95896', '94855', '95881', '94843', '94906', '95839', '95907', '94880', '94838', '99066', '99820', '94879', '94859', '95874', '99816', '95835', '99050', '94863', '94834', '94930', '94875', '99053', '95836', '99815', '94860', '94837', '94876', '94933', '94899', '99049', '94913', '94856', '94905', '94840', '99819', '95904', '94883', '94895', '94894', '95913', '99822', '94882', '95840', '99818', '94912', '94857', '99048', '94932', '94898', '94836', '94861', '99052', '95837', '99814', '94908', '94949', '99809', '94903', '94846', '94893', '95826', '99901', '95867', '99813', '94866', '94889', '94831', '94827', '94870', '94935', '95918', '94871', '94826', '94830', '94888', '99054', '99812', '95831', '99900', '95866', '99795', '95827', '94892', '94884', '94847', '94914', '94693']
+
+combined_data = {}
+
 def fetch_weather_data(url):
     """Fetches weather data from the given URL and saves it locally."""
     headers = {
@@ -21,7 +69,9 @@
         'Accept': 'application/json'
     }
     response = requests.get(url, headers=headers)
+    time.sleep(0.1)
     if response.status_code == 200:
+
         return response.json()
     else:
         raise Exception("Failed to fetch data: HTTP Status {}".format(response.status_code))
@@ -29,29 +79,75 @@
 
 def save_data_locally(data, filename):
     """Saves the fetched data to a local file."""
-    with open(filename, 'a') as file:
+    with open(filename, 'w') as file:
         json.dump(data, file, indent=4)
-    print(f"Data successfully saved to {filename}")
+
+def post_data_server(data):
+    requests.post(url = post_url,
+                  headers={'Content-Type': 'appplication/json'},
+                  data=json.dumps(data))
 
+def process_weather_data(item):
+    """Process a single data entry and return a dictionary of specific attributes."""
+    name_with_underscores = item['name'].replace(' ', '_')
+
+    check_time = item['local_date_time'].split("/")[1]
+
+    datetime1 = datetime.strptime(check_time, format)
+    minutes_diff = (c_time - datetime1).total_seconds() / 60.0
+    values = {}
+    if item['local_date_time'].split("/")[0] == c_date and minutes_diff <= check_minuets:
+        key = name_with_underscores
+        values[c_YM + ":" + c_date + ":" + check_time] = {
+            'weather': item['weather'],
+            'rel_hum': item['rel_hum'],
+            'air_temp': item['air_temp'],
+            'cloud': item['cloud'],
+            'rain_trace': item['rain_trace'],
+            'wind_spd_kmh': item['wind_spd_kmh']
+        }
+    else:
+        return "None", "None"
+    return key, values
 
 def main():
     station = ""
+    # Ensure the directory exists
+    directory = "Data"
+    count = 0
+    if not os.path.exists(directory):
+        os.makedirs(directory)
     # Fetch the weather data
-    for area in victoria_station:
-        try:
-            station = str(area)
-            t_url = source_url + vic_id + "/" + vic_id + "." + station + ".json"
-            print(t_url)
-            weather_data = fetch_weather_data(t_url)
-
-            # Save the data locally
-            save_data_locally(weather_data, "Data/Weather_Data")
-            time.sleep(2)
-
-        except Exception as e:
-            time.sleep(2)
-            print(str(e))
-
+    for id in (vic_id, syd_id):
+        if id == vic_id:
+            loc = "VIC"
+            station = victoria_station
+        else:
+            loc = "NSW"
+            station = sydney_station
+        for area in station:
+            try:
+                station = str(area)
+                t_url = source_url + id + "/" + id + "." + station + ".json"
+                weather_data = fetch_weather_data(t_url)
+                if weather_data and 'observations' in weather_data and 'data' in weather_data['observations']:
+                    for item in weather_data['observations']['data']:
+                        key, values = process_weather_data(item)
+                        key = key + "-" + loc
+                        if key != "None":
+                            if key in combined_data:
+                                combined_data[key].append(values) # Extend the list if key already exists
+                            else:
+                                combined_data[key] = [values]  # Create new entry if key does not exist
+                            time.sleep(0.1)  # Sleep to be polite to the server
+                            count += 1
+                    # Save the data locally
+            except Exception as e:
+                print(f"Error fetching data for station {station}: {str(e)}")
+    #save_data_locally(combined_data, "Data/Weather_Data.json")
+    post_data_server(combined_data)
+    print(f"total {count} amount of data fetchded")
+    return 'Ok'
 
 if __name__ == "__main__":
     main()
\ No newline at end of file
